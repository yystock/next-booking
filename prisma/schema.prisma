// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
  CREATOR
}

model Tenant {
  id               String        @id @default(cuid())
  name             String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  stripeCustomerId String?
  expirationDate   DateTime? // NULL -> means no expiration
  inviteKey        String        @unique @default(cuid())
  users            User[]
  activities       Activity[]
  clients          Client[]
  reservations     Reservation[]
  schedules        Schedule[]
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  tenantId      String
  activities    Activity[]
  schedules     Schedule[]
  tenant        Tenant     @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Client {
  id           String        @id @default(cuid())
  name         String
  color        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  reservations Reservation[]

  @@index([tenantId])
}

model Schedule {
  id         Int      @id @default(autoincrement())
  userId     String
  tenantId   String
  customer   Int      @default(1)
  start      DateTime
  end        DateTime
  activityId Int

  user       User     @relation(fields: [userId], references: [id])
  activities Activity @relation(fields: [activityId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([activityId])
  @@index([userId])
  @@index([tenantId])
}

model Activity {
  id           Int           @id @default(autoincrement())
  name         String
  imageSrc     String
  price        Decimal
  address      String
  latitude     Float
  longitude    Float
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  guestCount   Int           @default(1)
  active       Boolean       @default(false)
  category     String        @default("Experience")
  tenantId     String
  user         User          @relation(fields: [userId], references: [id])
  reservations Reservation[]
  schedules    Schedule[]
  tenant       Tenant        @relation(fields: [tenantId], references: [id])

  // Image        Image[]
  @@index([userId])
  @@index([tenantId])
}

model Reservation {
  id   Int     @id @default(autoincrement())
  name String?

  totalPrice Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clientId   String
  activityId Int
  isPaid     Boolean  @default(false)
  phone      String   @default("")
  address    String   @default("")
  tenantId   String

  activity Activity @relation(fields: [activityId], references: [id])
  client   Client   @relation(fields: [clientId], references: [id])
  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@index([activityId])
  @@index([clientId])
  @@index([tenantId])
}

// model Image {
//   id         String   @id @default(uuid())
//   activityId Int // Foreign Key to Product
//   activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
//   url        String // URL of the image
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@index([activityId])
// }
